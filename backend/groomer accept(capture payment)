const express = require('express');
const { PrismaClient } = require('@prisma/client');
const stripe = require('./src/lib/stripe'); // adjust path if needed
const prisma = new PrismaClient();

const router = express.Router();
// PATCH /bookings/:id/status
router.patch('/:id/status', async (req, res) => {
  try {
    const { id } = req.params;
    const { action } = req.body; // expected: "accept" or "decline"

    const booking = await prisma.booking.findUnique({ where: { id } });
    if (!booking) return res.status(404).json({ error: 'Booking not found' });

    // Ensure booking has a PaymentIntent
    if (!booking.stripePaymentIntentId) {
      return res.status(400).json({ error: 'Booking missing payment intent' });
    }

    let updated;
    if (action === 'accept') {
      // Capture the pre-authorized payment
      await stripe.paymentIntents.capture(booking.stripePaymentIntentId);

      updated = await prisma.booking.update({
        where: { id },
        data: { status: 'accepted' }
      });

    } else if (action === 'decline') {
      // Cancel the payment intent (releases hold on funds)
      await stripe.paymentIntents.cancel(booking.stripePaymentIntentId);

      updated = await prisma.booking.update({
        where: { id },
        data: { status: 'declined' }
      });

    } else {
      return res.status(400).json({ error: 'Invalid action' });
    }

    res.json(updated);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});
module.exports = router;
